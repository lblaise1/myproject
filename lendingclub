'''Importing libraries'''
import pandas as pd
import numpy as np
import datetime

'''Importing the dataset'''
lc=pd.read_csv('LoanStats3a.csv', skiprows=1, low_memory=False)

'''the dimension of the original dataset.'''
rows=lc.shape[0]
columns=lc.shape[1]

'''Missing values: columns'''
lc.isnull().sum() #to get the count of missing values in each column
lc.isnull().mean() #to get the % of NaNs in each column.
lc.columns[lc.isnull().mean() < 0.5]#the list of columns with less than 50% NaNs
lc1=lc[lc.columns[lc.isnull().mean() < 0.5]]#this subset the data to keep those
                                            #with few than 50% NaNs in their
                                            #columns.
'''
Missing Values: Rows:
This finds out if a row has NaN by using isnull() 
then it takes row-wise sum of the NaNs using sum(axis=0)
then it drops the rows with more than 20% NaNs'''
pct_row_null = lc1.isnull().sum(axis=1) / lc1.shape[1]
missing_in_rows = pct_row_null[pct_row_null > 0.20].index
lc1.drop(missing_in_rows, axis=0, inplace=True)

'''
Investigating the dataset, lc1, we have derived so far.'''
lc1.isnull().sum() #to get the count of NaNs in each of the remaining columns.
lc1.isnull().mean() 

'''Remaining columns with missing values:
emp_title
emp_length
desc
title
revol_util
last_pymnt_d
last_credit_pull_d
collections_12_mths_ex_med
chargeoff_within_12_mths
pub_rec_bankruptcies
tax_liens'''

'''I'll keep the following variables from the list:
emp_length
revol_util
last_pymnt_d
last_credit_pull_d
pub_rec_bankruptcies
tax_liens'''

'''
The list of variables below will be removed from consideration becasue they are
important to the analysis'''
lc2=lc1.drop(['emp_title', 'desc', 'title', 'collections_12_mths_ex_med', 
              'chargeoff_within_12_mths'], axis=1)

lc2.isnull().mean()
lc2.isnull().sum()


'''Cleaning
removing % from the int_rate variable'''
lc2['int_rate'] = lc2['int_rate'].str.rstrip('%').astype('float')/100
lc2['revol_util'] = lc2['revol_util'].str.rstrip('%').astype('float')/100


'''Replacing missing values'''
'''1. Employment length:'''
lc2['emp_length'].describe()
lc2['emp_length'].value_counts(dropna=False)

'''2. Percent of Revolving Credit Utilized'''
lc2['revol_util'].describe()
lc2['revol_util'].value_counts(dropna=False)
mean=lc2['revol_util'].mean()
lc2['revol_util'].replace(np.nan, mean, inplace=True)

'''3. Last Payment Date: replacing the missing values'''
lc2['last_pymnt_d'].describe()
lc2['last_pymnt_d'].value_counts(dropna=False)

'''4. Last Credit Pullted date:'''
lc2['last_credit_pull_d'].describe()
lc2['last_credit_pull_d'].value_counts(dropna=False)

'''5. Public Record Bankruptcies:'''
lc2['pub_rec_bankruptcies'].describe()
lc2['pub_rec_bankruptcies'].value_counts(dropna=False)


'''6. Tax Liens'''
lc2['tax_liens'].describe()
lc2['tax_liens'].value_counts(dropna=False)

'''setting the loan issue date, issue_d, to datetime format'''
lc2['issue_d']=pd.to_datetime(lc2.issue_d)
lc2['last_pymnt_d ']=pd.to_datetime(lc2.last_pymnt_d)
lc2['last_credit_pull_d']=pd.to_datetime(lc2.last_credit_pull_d)



'''setting the loan issue date, issue_d, as the index of the dataframe'''

lc2['issue_d'] = pd.to_datetime(lc2['issue_d'])
lc2['issue_d']= lc2['issue_d'].apply(lambda x: x.strftime('%m-%Y')) 


lc2=lc2.set_index('issue_d')
type(lc2.index)
lc2.index=pd.to_datetime(lc2.index)
type(lc2.index)
lc2.head

'''to get the count for each month in the dataset'''
lc2.resample('M').count()
lc2.resample('M').mean()


avg=lc2.reset_index(lc2.sort_values(lc2.set_index('issue_d').groupby(level=0)['loan_amnt'].agg({'avg_monthly':np.average,
             'monthly_count':'count'})))
    
avg.to_csv('lc_avg_series.csv', index=True, header=True)


****************************************************************************
*****************************USING R FOR TIME SERIES ANALYSIS***************



lending = read.csv("lc_avg_series.csv", header=T)
count=lending$monthly_count

#to see the columns in the data.
names(lending)
lending

#making the data into a timeseries
count=ts(count, start=c(2007,6), frequency=12)
count
t(count)

ts.plot(count,ylab="Number of Loans Issueed Per Monthly")
ts.plot(lending)

##1.Let's estimate the trend in the data using Moving Average.
##Let's first create equally spaced time points for fitting trends; recall these are
###monthly data.
time.pts = c(1:length(count))
time.pts = c(time.pts - min(time.pts))/max(time.pts)

###Now, let's fit the trend using moving average:
#ksmooth() is used for kernel regression. 
mav.fit = ksmooth(time.pts, count, kernel = "box")

#with the ts command, I transform the fitted trend into a time series.
count.fit.mav = ts(mav.fit$y, start=c(2007,6), frequency=12)



###Looking for a trend in the data
ts.plot(count, ylab="Monthly Loan Counts")#plotting the time series
lines(count.fit.mav, lwd=2, col= "purple") #adding the moving average line the time series plot.
abline(count.fit.mav[1], 0, lwd=2, col="blue")#this compares the fitted trend with the moving avearage trend
#################################################################################################################

##2. Let's estimate the trend in the data using Parametric Regression
x1 = time.pts
x2 = time.pts^2
lm.fit = lm(count~x1 + x2)
summary(lm.fit)#to get the model fit.


###Looking for a trend
count.fit.lm = ts(fitted(lm.fit), start=c(2007,6), frequency=12)
ts.plot(count, ylab="Monthly Loan Counts")#plotting the trend
lines(count.fit.lm, lwd=2, col="green")
abline(count.fit.lm[1], 0, lwd=2, col="blue")

########################################################################################################################
############  FITTING TREND USING NON-PARMETRIC REGRESSION#############################
#3.Estimating the trend using Local Polynomial Regression and Splines Regression.

##i) Trend estimation using Local Polynomial Regression:
loc.fit = loess(count~time.pts)

  #Transforming the fitted values into a time series 
  #using the ts() command as follows:
count.fit.loc = ts(fitted(loc.fit), start=c(2007,6), frequency=12)

##ii) Trend estimation using Spline Regression:
library(nlme) #this package has to be uploaded before mgcv
library(mgcv)

      #I use s() in the gam() command to specify that I want a spline fit. 
      #If I dont specify that, gam()will fit a linear model in the time points.
gam.fit = gam(count~s(time.pts))

      #Now we can transform the fitted values of the model into a time series using ts() 
count.fit.gam = ts(fitted(gam.fit), start=c(2007,6), frequency=12)


#iii) Looking for a trend in the data
      #Now we can overlay the fitted trends from the 2 models on the observed time series
ts.plot(count, ylab="Loan Count")
lines(count.fit.loc, lwd=2, col="brown")
lines(count.fit.gam, lwd=2, col="red")
abline(count.fit.loc[1],0, lwd=2, col="blue")

==========================================
#Comparing all the estimated trends: 
   #1. Moving average, 
   #2. Parametric Quadratic, 
   #3. Non-parametric:
      #i) Local Polynomial Regression 
      #ii)Splines Regression

all.val = c(count.fit.mav, count.fit.lm, count.fit.gam, count.fit.loc)
ylim = c(min(all.val), max(all.val))

#Plotting the trends along with the legend command which allows the identification of the lines corresponding to 
#the trend estimation method:
ts.plot(count.fit.lm, lwd=2, col="green", ylim=ylim, ylab="Loan Counts")
lines(count.fit.mav, lwd=2, col="purple")
lines(count.fit.gam, lwd=2, col="red")
lines(count.fit.loc, lwd=2, col="brown")
legend(x=1900, y=64, legend=c("MAV", "LM", "GAM", "LOESS"), lty=1, col=c("purple","green","red","brown"))

===================================================================================================================
################ TREND AND SEASONALITY ESTIMATION #########################

#Loading the library:
library(TSA)

   #Estimating Seasonality using seasonal means Model.
month=season(count)

   ## Estimate seasonality using ANOVA approach
month = season(temp)

   #Let's drop January since we'll have an intercept in the model.
model1 = lm(temp~month) #Seasonal Means model with an intercept
summary(model1)




## Drop January (model with intercept)
model1 = lm(temp~month)
summary(model1)

## All seasonal mean effects (model without intercept)
model2 = lm(temp~month-1)
summary(model2)

## Estimate seasonality using cos-sin model
har=harmonic(temp,1)
model3=lm(temp~har)
summary(model3)
har2=harmonic(temp,2)
model4=lm(temp~har2)
summary(model4)

## Compare Seasonality Estimates
## Seasonal Means Model
st1 = coef(model2)
## Cos-Sin Model
st2 = fitted(model4)[1:12]
plot(1:12,st1,lwd=2,type="l",xlab="Month",ylab="Seasonality")
lines(1:12,st2,lwd=2, col="brown")

################ TREND AND SEASONALITY ESTIMATION #########################
## Using linear regression

## Fit a parametric model for both trend and seasonality
x1 = time.pts
x2 = time.pts^2
har2=harmonic(temp,2)
lm.fit = lm(temp~x1+x2+har2)
summary(lm.fit)
dif.fit.lm = ts((temp-fitted(lm.fit)),start=1879,frequency=12)
ts.plot(dif.fit.lm,ylab="Residual Process")

## Fit a non-parametric model for trend and linear model for seasonality
gam.fit = gam(temp~s(time.pts)+har2)
dif.fit.gam = ts((temp-fitted(gam.fit)),start=1879,frequency=12)
ts.plot(dif.fit.gam,ylab="Residual Process")

## Compare approaches 
ts.plot(dif.fit.lm,ylab="Residual Process",col="brown")
lines(dif.fit.gam,col="blue")

acf(temp,lag.max=12*4,main="")
acf(dif.fit.lm,lag.max=12*4,main="")
acf(dif.fit.gam,lag.max=12*4,main="")


