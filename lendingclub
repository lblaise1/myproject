import pandas as pd
import numpy as np
import seaborn as sn
import matplotlib.pyplot as plt


'''loading the dataset'''
lending=pd.read_csv('lending.csv', low_memory=False)
'''original dataset: 42,538 x 142 most of them are either blanks or irrelevant
to the current analysis as a result of the first review of the dataset.'''
print(lending.shape)
'''previewing the data'''
lending.head(10)

'''
*********************Missing Values***************************
Execute the code in the cell below to identify the columns with missing values.
can be shown as: 'N/A', "?", blank cell, or "0"'''

c1=lending['loan_amnt'].value_counts(sort=False, dropna=False)
c2=lending['funded_amnt'].value_counts(sort=False, dropna=False)
c3=lending['Fund_diff'].value_counts(sort=False, dropna=False)
c4=lending['funded_amnt_inv'].value_counts(sort=False, dropna=False)
c5=lending['term'].value_counts(sort=False, dropna=False)
c6=lending['int_rate'].value_counts(sort=False, dropna=False)
c7=lending['installment'].value_counts(sort=False, dropna=False)
c8=lending['grade'].value_counts(sort=False, dropna=False)
c9=lending['sub_grade'].value_counts(sort=False, dropna=False)
c10=lending['emp_length'].value_counts(sort=False, dropna=False)
c11=lending['home_ownership'].value_counts(sort=False, dropna=False)
c12=lending['annual_inc'].value_counts(sort=False, dropna=False)
c13=lending['verification_status'].value_counts(sort=False, dropna=False)
c14=lending['loan_status'].value_counts(sort=False, dropna=False)
c15=lending['purpose'].value_counts(sort=False, dropna=False)
c16=lending['dti'].value_counts(sort=False, dropna=False)
c17=lending['delinq_2yrs'].value_counts(sort=False, dropna=False)
c18=lending['earliest_cr_line'].value_counts(sort=False, dropna=False)
c19=lending['issue_d'].value_counts(sort=False, dropna=False)
c20=lending['Cred_hist'].value_counts(sort=False, dropna=False)
c21=lending['inq_last_6mths'].value_counts(sort=False, dropna=False)
c22=lending['mths_since_last_delinq'].value_counts(sort=False, dropna=False)
c23=lending['mths_since_last_record'].value_counts(sort=False, dropna=False)
c24=lending['open_acc'].value_counts(sort=False, dropna=False)
c25=lending['pub_rec'].value_counts(sort=False, dropna=False)
c26=lending['revol_bal'].value_counts(sort=False, dropna=False)
c27=lending['revol_util'].value_counts(sort=False, dropna=False)
c28=lending['total_acc'].value_counts(sort=False, dropna=False)
c29=lending['out_prncp_inv'].value_counts(sort=False, dropna=False)
c30=lending['total_pymnt'].value_counts(sort=False, dropna=False)
c31=lending['total_rec_prncp'].value_counts(sort=False, dropna=False)
c32=lending['total_rec_int'].value_counts(sort=False, dropna=False)
c33=lending['total_rec_late_fee'].value_counts(sort=False, dropna=False)
c34=lending['recoveries'].value_counts(sort=False, dropna=False)
c35=lending['collection_recovery_fee'].value_counts(sort=False, dropna=False)
c36=lending['last_pymnt_amnt'].value_counts(sort=False, dropna=False)
c37=lending['pub_rec_bankruptcies'].value_counts(sort=False, dropna=False)
c38=lending['settlement_status'].value_counts(sort=False, dropna=False)
c39=lending['settlement_percentage'].value_counts(sort=False, dropna=False)
c40=lending['settlement_term'].value_counts(sort=False, dropna=False)
c41=lending['Cred_hist'].value_counts(sort=False, dropna=False)

'''
Droping some columns that have too many missing values; they're not useful to 
the analysis.'''
#droping the columns:
#these 2 are dates that were used to create another variable; not important
#on their own.
lending.drop('earliest_cr_line', axis=1, inplace=True)#c18
lending.drop("issue_d",axis=1, inplace=True) #c19
#26,897 data points are missing.
lending.drop("mths_since_last_delinq",axis=1, inplace=True)#c22
#This can be dropped; 38,855 of the 42,506 are missing.
lending.drop("mths_since_last_record",axis=1, inplace=True)#c23
#can be dropped; all 42,506 points are the same, 0.
lending.drop("out_prncp_inv",axis=1, inplace=True)#c29
#c38, c39 and 640, each has 42,346 data points missing.
lending.drop("settlement_status",axis=1, inplace=True)#c38
lending.drop("settlement_percentage",axis=1, inplace=True)#c39
lending.drop("settlement_term",axis=1, inplace=True)#c40

'''lending2=lending1.copy()'''

****************************************************************************
****************************************************************************
************changing variable types*****************'''

lending2=pd.read_csv('lending2.csv', low_memory=False)
lending2.columns
(lending2.astype(np.float) == 'NaN').any()##Fix this 


'''1. recoding the variable loanhome_ownership'''
status = {'Does not meet the credit policy. Status:Charged Off':1, 
                'Does not meet the credit policy. Status:Fully Paid': 0,
                'Fully Paid': 0, 'Charged Off':1}
lending2['charged_off'] = [status[x] for x in lending2['loan_status']]
lending2['charged_off'].value_counts()

'''2. Recode term using list comprehension as follows: 
    "60 months" with '60 Months'; "36 months" with '36 Months'
'''
#createing a dictionary:
terms = {' 60 months':'60 Months', ' 36 months': '36 Months'}
#building a list comprehension:
lending2['term'] = [terms[x] for x in lending2['term']]
lending2['term'].value_counts()
        
'''reconstructing the employment history variable:
years = {'10+ years':10, '6 years': 6, '< 1 year': 1, '4 years': 4, '3 years':3,
         '2 years': 2, '1 year': 1, '9 years': 9, '5 years': 5, '7 years': 7, 
         '8 years': 8}
lending_c['emp_length'] = [years[x] for x in lending_c['emp_length']]
lending_c['emp_length'].value_counts()'''

'''3. recoding the variable verification_status'''
verification = {'Source Verified':'Verified', 'Not Verified': 'Not Verified', 
                'Verified': 'Verified'}
lending2['verification_status'] = [verification[x] for x in lending2['verification_status']]
lending2['verification_status'].value_counts()

'''4. recoding home_ownership'''
homes = {'NONE':'No', 'RENT':'No', 'OWN':'Yes', 'MORTGAGE':'Yes', 'OTHER':'No'}
lending2['home_ownership'] = [homes[x] for x in lending['home_ownership']]
lending2['home_ownership'].value_counts()

lending2.to_csv('lending3.csv', index=False, header=True)


'''
****************************************************************************
****************************************************************************
To get to lending3, I had to do some manual processing that included removing 
percentaage signs and convert the values into decimals. I used Excel for that
so the processing was not all done in Python.
Exploratory Data Analysis:
  '''
lending3=pd.read_csv('lending3.csv', low_memory=False)
lending3.head()
lending3.dtypes
lending3.shape
lending3.columns

'''categorical variables''''
#Converting to object:
lending3['loan_status']=lending3["loan_status"].astype(object)

lending3['loan_status']=lending3["loan_status"].astype('category', copy=False)
lending3['loan_status'].dtypes
lending3['loan_status'].value_counts()

lending3['verification_status']=lending3["verification_status"].astype('category')
lending3['term']=lending3["term"].astype('category')
lending3['emp_length']=lending3["emp_length"].astype('category')
lending3['home_ownership']=lending3["home_ownership"].astype('category')
lending3['grade']=lending3["grade"].astype('category')
lending3['purpose']=lending3["purpose"].astype('category')

#Getting the value count
lending3['loan_status'].value_counts()
lending3['verification_status'].value_counts()
lending3['term'].value_counts()
lending3['emp_length'].value_counts()
lending3['home_ownership'].value_counts()
lending3['home_ownership'].value_counts()
lending3['grade'].value_counts()
lending3['purpose'].value_counts()

cat_columns=['term', 'grade', 'sub_grade', 'emp_length', 'home_ownership',
             'verification_status', 'loan_status', 'purpose']

categoricals=lending3[['grade', 'sub_grade', 'home_ownership', 'purpose', 'loan_status',
              'term', 'verification_status']]

num_cols = ['loan_amnt','funded_amnt','Fund_diff', 'funded_amnt_inv','emp_length',
            'delinq_2yrs','Cred_hist', 'open_acc', 'revol_bal','total_acc', 
            'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp','total_rec_int', 
            'total_rec_late_fee', 'recoveries', 'collection_recovery_fee', 'last_pymnt_amnt',
            'int_rate', 'installment', 'annual_inc', 'dti','revol_util', 'pub_rec_bankruptcies']

numeric_cols = lending3[['loan_amnt','funded_amnt','Fund_diff', 'funded_amnt_inv','emp_length',
            'delinq_2yrs','Cred_hist', 'open_acc', 'revol_bal','total_acc', 
            'total_pymnt', 'total_pymnt_inv', 'total_rec_prncp','total_rec_int', 
            'total_rec_late_fee', 'recoveries', 'collection_recovery_fee', 'last_pymnt_amnt',
            'int_rate', 'installment', 'annual_inc', 'dti','revol_util', 'pub_rec_bankruptcies']]


'''
As stated previously, the primary goal of visualization for classification 
problems is to understand which features are useful for class separation. 

Let's visualize the separation quality of numeric features:loan_status
'''
def plot_box(lending3, cols, col_x = 'loan_status'):
    for col in cols:
        sns.set_style("whitegrid")
        sns.boxplot(col_x, col, data=lending3)
        plt.xlabel(col_x) # Set text for the x axis
        plt.ylabel(col)# Set text for y axis
        plt.show()
        
num_cols=['loan_amnt', 'funded_amnt', 'Fund_diff', 'funded_amnt_inv', 'int_rate',
         'installment', 'annual_inc', 'dti', 'delinq_2yrs', 'Cred_hist', 
         'inq_last_6mths', 'open_acc', 'pub_rec', 'revol_bal', 'revol_util', 
         'total_acc', 'total_acc', 'total_pymnt', 'total_pymnt_inv', 
         'total_rec_prncp', 'total_rec_int','total_rec_late_fee', 'recoveries',
         'collection_recovery_fee', 'last_pymnt_amnt', 'pub_rec_bankruptcies']
plot_box(lending3, num_cols)

'''
From the created plots, which two features seem to separate the good and bad 
credits?
I used the violin plots for further illustration.'''
'''*****Violin Plots******'''
def plot_violin(lending3, cols, col_x = 'loan_status'):
    for col in cols:
        sns.set_style("whitegrid")
        sns.violinplot(col_x, col, data=lending3)
        plt.xlabel(col_x) # Set text for the x axis
        plt.ylabel(col)# Set text for y axis
        plt.show()
plot_violin(lending3, num_cols)
